// Code generated by generate/main.go. DO NOT EDIT.
// source: api/api.proto

package iterm2

import (
	"github.com/tjamet/goterm2/api"
)

func (I *ITerm2) SubscribePromptMonitorNotifications(s *api.SessionSummary, request *api.PromptMonitorRequest, cbs ...func(*api.PromptNotification) error) (*api.NotificationResponse, error) {
	response, err := I.Notification(&api.NotificationRequest{
		Subscribe: api.Bool(true),

		Session: s.UniqueIdentifier,

		NotificationType: api.NotificationType_NOTIFY_ON_PROMPT.Enum(),

		Arguments: &api.NotificationRequest_PromptMonitorRequest{
			PromptMonitorRequest: request,
		},
	})
	if err != nil {
		return nil, err
	}
	for _, cb := range cbs {
		err := I.RegisterNotifier(PromptNotifier(cb))
		if err != nil {
			return nil, err
		}
	}
	return response, err
}

func (I *ITerm2) SubscribeScreenUpdateNotifications(s *api.SessionSummary, cbs ...func(*api.ScreenUpdateNotification) error) (*api.NotificationResponse, error) {
	response, err := I.Notification(&api.NotificationRequest{
		Subscribe: api.Bool(true),

		Session: s.UniqueIdentifier,

		NotificationType: api.NotificationType_NOTIFY_ON_SCREEN_UPDATE.Enum(),
	})
	if err != nil {
		return nil, err
	}
	for _, cb := range cbs {
		err := I.RegisterNotifier(ScreenUpdateNotifier(cb))
		if err != nil {
			return nil, err
		}
	}
	return response, err
}

func (I *ITerm2) SubscribeCustomEscapeSequenceNotifications(s *api.SessionSummary, cbs ...func(*api.CustomEscapeSequenceNotification) error) (*api.NotificationResponse, error) {
	response, err := I.Notification(&api.NotificationRequest{
		Subscribe: api.Bool(true),

		Session: s.UniqueIdentifier,

		NotificationType: api.NotificationType_NOTIFY_ON_CUSTOM_ESCAPE_SEQUENCE.Enum(),
	})
	if err != nil {
		return nil, err
	}
	for _, cb := range cbs {
		err := I.RegisterNotifier(CustomEscapeSequenceNotifier(cb))
		if err != nil {
			return nil, err
		}
	}
	return response, err
}

func (I *ITerm2) SubscribeVariableChangedNotifications(s *api.SessionSummary, request *api.VariableMonitorRequest, cbs ...func(*api.VariableChangedNotification) error) (*api.NotificationResponse, error) {
	response, err := I.Notification(&api.NotificationRequest{
		Subscribe: api.Bool(true),

		Session: s.UniqueIdentifier,

		NotificationType: api.NotificationType_NOTIFY_ON_VARIABLE_CHANGE.Enum(),

		Arguments: &api.NotificationRequest_VariableMonitorRequest{
			VariableMonitorRequest: request,
		},
	})
	if err != nil {
		return nil, err
	}
	for _, cb := range cbs {
		err := I.RegisterNotifier(VariableChangedNotifier(cb))
		if err != nil {
			return nil, err
		}
	}
	return response, err
}

func (I *ITerm2) SubscribeKeystrokeFilterNotifications(s *api.SessionSummary, request *api.KeystrokeFilterRequest, cbs ...func(*api.KeystrokeNotification) error) (*api.NotificationResponse, error) {
	response, err := I.Notification(&api.NotificationRequest{
		Subscribe: api.Bool(true),

		Session: s.UniqueIdentifier,

		NotificationType: api.NotificationType_KEYSTROKE_FILTER.Enum(),

		Arguments: &api.NotificationRequest_KeystrokeFilterRequest{
			KeystrokeFilterRequest: request,
		},
	})
	if err != nil {
		return nil, err
	}
	for _, cb := range cbs {
		err := I.RegisterNotifier(KeystrokeNotifier(cb))
		if err != nil {
			return nil, err
		}
	}
	return response, err
}

func (I *ITerm2) SubscribeNewSessionNotifications(cbs ...func(*api.NewSessionNotification) error) (*api.NotificationResponse, error) {
	response, err := I.Notification(&api.NotificationRequest{
		Subscribe: api.Bool(true),

		NotificationType: api.NotificationType_NOTIFY_ON_NEW_SESSION.Enum(),
	})
	if err != nil {
		return nil, err
	}
	for _, cb := range cbs {
		err := I.RegisterNotifier(NewSessionNotifier(cb))
		if err != nil {
			return nil, err
		}
	}
	return response, err
}

func (I *ITerm2) SubscribeTerminateSessionNotifications(cbs ...func(*api.TerminateSessionNotification) error) (*api.NotificationResponse, error) {
	response, err := I.Notification(&api.NotificationRequest{
		Subscribe: api.Bool(true),

		NotificationType: api.NotificationType_NOTIFY_ON_TERMINATE_SESSION.Enum(),
	})
	if err != nil {
		return nil, err
	}
	for _, cb := range cbs {
		err := I.RegisterNotifier(TerminateSessionNotifier(cb))
		if err != nil {
			return nil, err
		}
	}
	return response, err
}

func (I *ITerm2) SubscribeLayoutChangedNotifications(cbs ...func(*api.LayoutChangedNotification) error) (*api.NotificationResponse, error) {
	response, err := I.Notification(&api.NotificationRequest{
		Subscribe: api.Bool(true),

		NotificationType: api.NotificationType_NOTIFY_ON_LAYOUT_CHANGE.Enum(),
	})
	if err != nil {
		return nil, err
	}
	for _, cb := range cbs {
		err := I.RegisterNotifier(LayoutChangedNotifier(cb))
		if err != nil {
			return nil, err
		}
	}
	return response, err
}

func (I *ITerm2) SubscribeFocusChangedNotifications(cbs ...func(*api.FocusChangedNotification) error) (*api.NotificationResponse, error) {
	response, err := I.Notification(&api.NotificationRequest{
		Subscribe: api.Bool(true),

		NotificationType: api.NotificationType_NOTIFY_ON_FOCUS_CHANGE.Enum(),
	})
	if err != nil {
		return nil, err
	}
	for _, cb := range cbs {
		err := I.RegisterNotifier(FocusChangedNotifier(cb))
		if err != nil {
			return nil, err
		}
	}
	return response, err
}

func (I *ITerm2) SubscribeServerOriginatedRPCNotifications(request *api.RPCRegistrationRequest, cbs ...func(*api.ServerOriginatedRPCNotification) error) (*api.NotificationResponse, error) {
	response, err := I.Notification(&api.NotificationRequest{
		Subscribe: api.Bool(true),

		NotificationType: api.NotificationType_NOTIFY_ON_SERVER_ORIGINATED_RPC.Enum(),

		Arguments: &api.NotificationRequest_RpcRegistrationRequest{
			RpcRegistrationRequest: request,
		},
	})
	if err != nil {
		return nil, err
	}
	for _, cb := range cbs {
		err := I.RegisterNotifier(ServerOriginatedRPCNotifier(cb))
		if err != nil {
			return nil, err
		}
	}
	return response, err
}

func (I *ITerm2) SubscribeBroadcastDomainsChangedNotifications(cbs ...func(*api.BroadcastDomainsChangedNotification) error) (*api.NotificationResponse, error) {
	response, err := I.Notification(&api.NotificationRequest{
		Subscribe: api.Bool(true),

		NotificationType: api.NotificationType_NOTIFY_ON_BROADCAST_CHANGE.Enum(),
	})
	if err != nil {
		return nil, err
	}
	for _, cb := range cbs {
		err := I.RegisterNotifier(BroadcastDomainsChangedNotifier(cb))
		if err != nil {
			return nil, err
		}
	}
	return response, err
}

func (I *ITerm2) SubscribeProfileChangedNotifications(request *api.ProfileChangeRequest, cbs ...func(*api.ProfileChangedNotification) error) (*api.NotificationResponse, error) {
	response, err := I.Notification(&api.NotificationRequest{
		Subscribe: api.Bool(true),

		NotificationType: api.NotificationType_NOTIFY_ON_PROFILE_CHANGE.Enum(),

		Arguments: &api.NotificationRequest_ProfileChangeRequest{
			ProfileChangeRequest: request,
		},
	})
	if err != nil {
		return nil, err
	}
	for _, cb := range cbs {
		err := I.RegisterNotifier(ProfileChangedNotifier(cb))
		if err != nil {
			return nil, err
		}
	}
	return response, err
}
